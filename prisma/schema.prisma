generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Bearbrick {
  id                String            @id @default(cuid())
  name              String
  sizePercentage    Int
  releaseDate       DateTime?
  rarityPercentage  Float?
  estimatedQuantity Int?
  materialType      String?           @default("ABS Plastic")
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  seriesId          String
  categoryId        String
  collaborationId   String?
  createdById       String
  images            BearbrickImage[]
  categories        categories        @relation(fields: [categoryId], references: [id])
  collaborations    collaborations?   @relation(fields: [collaborationId], references: [id])
  users             users             @relation(fields: [createdById], references: [id])
  series            series            @relation(fields: [seriesId], references: [id])
  edit_requests     edit_requests[]
  image_requests    image_requests[]
  recommendations   recommendations[]

  @@map("bearbricks")
}

model BearbrickImage {
  id           String    @id @default(cuid())
  url          String
  altText      String?
  isPrimary    Boolean   @default(false)
  uploadedAt   DateTime  @default(now())
  bearbrickId  String
  uploadedById String
  bearbrick    Bearbrick @relation(fields: [bearbrickId], references: [id], onDelete: Cascade)
  users        users     @relation(fields: [uploadedById], references: [id])

  @@map("bearbrick_images")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model categories {
  id           String      @id
  name         String      @unique
  description  String?
  rarityWeight Float       @default(1.0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  bearbricks   Bearbrick[]
}

model collaborations {
  id          String      @id
  brandName   String
  artistName  String?
  type        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  bearbricks  Bearbrick[]
}

model edit_requests {
  id            String          @id
  description   String?
  oldData       Json?
  newData       Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  reviewedAt    DateTime?
  bearbrickId   String
  requestedById String
  reviewedById  String?
  type          EditRequestType
  status        RequestStatus   @default(PENDING)
  bearbricks    Bearbrick       @relation(fields: [bearbrickId], references: [id])
  users         users           @relation(fields: [requestedById], references: [id])
}

model image_requests {
  id            String        @id
  newImageUrl   String
  reason        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  reviewedAt    DateTime?
  bearbrickId   String
  requestedById String
  reviewedById  String?
  status        RequestStatus @default(PENDING)
  bearbricks    Bearbrick     @relation(fields: [bearbrickId], references: [id])
  users         users         @relation(fields: [requestedById], references: [id])
}

model recommendations {
  id          String    @id
  createdAt   DateTime  @default(now())
  userId      String
  bearbrickId String
  bearbricks  Bearbrick @relation(fields: [bearbrickId], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bearbrickId])
}

model series {
  id          String      @id
  number      Int         @unique
  name        String
  season      String
  releaseYear Int
  theme       String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  bearbricks  Bearbrick[]
}

model user_submitted_images {
  id                                               String           @id
  imageUrl                                         String
  title                                            String?
  description                                      String?
  status                                           SubmissionStatus @default(PENDING)
  createdAt                                        DateTime         @default(now())
  updatedAt                                        DateTime
  reviewedAt                                       DateTime?
  submittedById                                    String
  reviewedById                                     String?
  users_user_submitted_images_reviewedByIdTousers  users?           @relation("user_submitted_images_reviewedByIdTousers", fields: [reviewedById], references: [id])
  users_user_submitted_images_submittedByIdTousers users            @relation("user_submitted_images_submittedByIdTousers", fields: [submittedById], references: [id])
}

model users {
  id                                                               String                  @id
  name                                                             String?
  email                                                            String                  @unique
  emailVerified                                                    DateTime?
  image                                                            String?
  role                                                             UserRole                @default(USER)
  createdAt                                                        DateTime                @default(now())
  updatedAt                                                        DateTime
  Account                                                          Account[]
  Session                                                          Session[]
  bearbrick_images                                                 BearbrickImage[]
  bearbricks                                                       Bearbrick[]
  edit_requests                                                    edit_requests[]
  image_requests                                                   image_requests[]
  recommendations                                                  recommendations[]
  user_submitted_images_user_submitted_images_reviewedByIdTousers  user_submitted_images[] @relation("user_submitted_images_reviewedByIdTousers")
  user_submitted_images_user_submitted_images_submittedByIdTousers user_submitted_images[] @relation("user_submitted_images_submittedByIdTousers")
}

enum EditRequestType {
  INFO_UPDATE
  CATEGORY_CHANGE
  SERIES_CORRECTION
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
  OWNER
}
